import os
from subprocess import call
from plyfile import PlyData, PlyElement

base_path = os.path.expanduser("~/projects/shape_sharing/data/")
models_list = base_path + 'bigbird/models.txt'

meshlabserver = "/Applications/meshlab.app/Contents/MacOS/meshlabserver"


def load_from_ply(filename):
    '''
    loads faces and vertices from a ply file
    unpacks the structured array into standard np arrays
    ''' 
    print "Loading from " + filename
    plydata = PlyData.read(open(filename, 'r'))

    np_vertex_data = []
    for vertex in plydata['vertex'].data:
        n = map(float, vertex)
        np_vertex_data.append(n)
    
    faces = []
    for face_data in plydata['face'].data:
        n = map(int, face_data[0])
        faces.append(n)

    return np_vertex_data, faces


def write_obj(vertices, faces, filename):

    f = open(filename, 'w')

    f.write("# OBJ file \n")
    f.write("# generated by mfirman in a fit of rage\n")

    for vertex in vertices:
        f.write("v " + str(vertex[0]) + " " + str(vertex[1]) + " " + str(vertex[2]) + "\n")

    for face in faces:
        f.write("f " + str(face[0]) + " " + str(face[1]) + " " + str(face[2]) + "\n")


f = open(models_list, 'r')

for idx, line in enumerate(f):

    modelname = line.strip()
    ply_file = base_path + "bigbird_meshes/" + modelname + '/meshes/poisson.ply'
    obj_file = base_path + "bigbird_meshes/" + modelname + '/meshes/poisson.obj'

    if os.path.exists(obj_file):
        print "Skipping " + modelname
        continue

    vertices, faces = load_from_ply(ply_file)
    write_obj(vertices, faces, obj_file)

    print "Done " + str(idx) 
